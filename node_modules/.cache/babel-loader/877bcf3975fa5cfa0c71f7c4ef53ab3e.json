{"ast":null,"code":"import _objectSpread from \"/Users/firnazluztian/Documents/react/Oromico/myRepo/milestone1/dogfair_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/firnazluztian/Documents/react/Oromico/myRepo/milestone1/dogfair_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/firnazluztian/Documents/react/Oromico/myRepo/milestone1/dogfair_frontend/src/doggoComponents/DoggoInput.js\";\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport RegistrationForm from '../components/RegistrationForm';\n\nconst DoggoInput = props => {\n  const initialState = {\n    id: null,\n    name: '',\n    age: '',\n    description: '',\n    doggo_id: ''\n  };\n\n  const _useForm = useForm(),\n        handleSubmit = _useForm.handleSubmit,\n        register = _useForm.register,\n        errors = _useForm.errors;\n\n  const _useState = useState(initialState),\n        _useState2 = _slicedToArray(_useState, 2),\n        doggo = _useState2[0],\n        setDoggo = _useState2[1];\n\n  const handleInputChange = event => {\n    setDoggo(_objectSpread({}, doggo, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const postData = async () => {\n    await axios.post(props.urlApi, {\n      registration: {\n        name: doggo.name,\n        age: doggo.age,\n        description: doggo.description,\n        doggo_id: doggo.doggo_id\n      }\n    }).then(response => {\n      console.log(response);\n      console.log(response.data);\n      setDoggo(initialState);\n      alert('succesfully registered');\n    }).catch(error => {\n      console.log(error);\n      alert(error);\n    });\n  };\n\n  const onSubmit = event => {\n    console.log(event);\n    postData();\n  };\n\n  return React.createElement(RegistrationForm, {\n    onSubmit: onSubmit,\n    onChange: handleInputChange,\n    value: [doggo.name, doggo.age, doggo.description, doggo.doggo_id],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }) // <div className=\"container\">\n  //   <div className=\"reg-container\">\n  //     <form onSubmit={handleSubmit (onSubmit)}>\n  //       <p>Add Doggo Registration</p>\n  //       <div className=\"column\">\n  //         <input\n  //           type=\"text\"\n  //           className=\"input\"\n  //           placeholder=\"Name\"\n  //           name=\"name\"\n  //           value={doggo.name}\n  //           onChange={handleInputChange}\n  //           ref={register ({\n  //             required: 'Name is required',\n  //             pattern: {\n  //               value: '',\n  //               message: 'Please input valid name',\n  //             },\n  //           })}\n  //         />\n  //         <p className=\"has-text-danger\">\n  //           {errors.name && errors.name.message}\n  //         </p>\n  //       </div>\n  //       <div className=\"column\">\n  //         <input\n  //           type=\"number\"\n  //           className=\"input\"\n  //           placeholder=\"Age\"\n  //           name=\"age\"\n  //           value={doggo.age}\n  //           onChange={handleInputChange}\n  //           ref={register ({\n  //             required: 'Age is required',\n  //             min: 0,\n  //             max: 100,\n  //             pattern: {\n  //               value: '',\n  //               message: 'Age must be within 0-100',\n  //             },\n  //           })}\n  //         />\n  //         <p className=\"has-text-danger\">\n  //           {errors.age && errors.age.message}\n  //         </p>\n  //       </div>\n  //       <div className=\"column\">\n  //         <input\n  //           type=\"text\"\n  //           className=\"input\"\n  //           placeholder=\"Description\"\n  //           name=\"description\"\n  //           value={doggo.description}\n  //           onChange={handleInputChange}\n  //           ref={register ({\n  //             required: 'Description is required, up to 100 letters',\n  //             maxLength: 100,\n  //             pattern: {\n  //               value: '',\n  //               message: 'Description is only up to 100 letters',\n  //             },\n  //           })}\n  //         />\n  //         <p className=\"has-text-danger\">\n  //           {errors.description && errors.description.message}\n  //         </p>\n  //       </div>\n  //       <div className=\"column\">\n  //         <input\n  //           type=\"text\"\n  //           className=\"input\"\n  //           placeholder=\"Doggo id\"\n  //           name=\"doggo_id\"\n  //           value={doggo.doggo_id}\n  //           onChange={handleInputChange}\n  //           ref={register ({\n  //             required: 'Doggo ID is required',\n  //             pattern: {\n  //               value: /(J)(\\d{6})([a-d])/g,\n  //               message: 'Invalid id format, starts with capital letter J, followed by any 6 digits number, and ends with any lowercase letter from a to d',\n  //             },\n  //           })}\n  //         />\n  //         <p className=\"has-text-danger\">\n  //           {errors.doggo_id && errors.doggo_id.message}\n  //         </p>\n  //       </div>\n  //       <button className=\"button is-primary\" type=\"submit\">Submit</button>\n  //     </form>\n  //   </div>\n  // </div>\n  ;\n};\n\nexport default DoggoInput;","map":{"version":3,"sources":["/Users/firnazluztian/Documents/react/Oromico/myRepo/milestone1/dogfair_frontend/src/doggoComponents/DoggoInput.js"],"names":["React","useState","useForm","axios","RegistrationForm","DoggoInput","props","initialState","id","name","age","description","doggo_id","handleSubmit","register","errors","doggo","setDoggo","handleInputChange","event","target","value","postData","post","urlApi","registration","then","response","console","log","data","alert","catch","error","onSubmit"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,gCAA7B;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,EAAE,EAAE,IADe;AAEnBC,IAAAA,IAAI,EAAE,EAFa;AAGnBC,IAAAA,GAAG,EAAE,EAHc;AAInBC,IAAAA,WAAW,EAAE,EAJM;AAKnBC,IAAAA,QAAQ,EAAE;AALS,GAArB;;AAD0B,mBASeV,OAAO,EATtB;AAAA,QASnBW,YATmB,YASnBA,YATmB;AAAA,QASLC,QATK,YASLA,QATK;AAAA,QASKC,MATL,YASKA,MATL;;AAAA,oBAUAd,QAAQ,CAAEM,YAAF,CAVR;AAAA;AAAA,QAUnBS,KAVmB;AAAA,QAUZC,QAVY;;AAY1B,QAAMC,iBAAiB,GAAGC,KAAK,IAAI;AACjCF,IAAAA,QAAQ,mBAAMD,KAAN;AAAa,OAACG,KAAK,CAACC,MAAN,CAAaX,IAAd,GAAqBU,KAAK,CAACC,MAAN,CAAaC;AAA/C,OAAR;AACD,GAFD;;AAIA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,UAAMnB,KAAK,CACRoB,IADG,CACGjB,KAAK,CAACkB,MADT,EACiB;AACnBC,MAAAA,YAAY,EAAE;AACZhB,QAAAA,IAAI,EAAEO,KAAK,CAACP,IADA;AAEZC,QAAAA,GAAG,EAAEM,KAAK,CAACN,GAFC;AAGZC,QAAAA,WAAW,EAAEK,KAAK,CAACL,WAHP;AAIZC,QAAAA,QAAQ,EAAEI,KAAK,CAACJ;AAJJ;AADK,KADjB,EAQHc,IARG,CAQGC,QAAQ,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAaF,QAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAaF,QAAQ,CAACG,IAAtB;AACAb,MAAAA,QAAQ,CAACV,YAAD,CAAR;AACAwB,MAAAA,KAAK,CAAE,wBAAF,CAAL;AACD,KAbG,EAcHC,KAdG,CAcIC,KAAK,IAAI;AACfL,MAAAA,OAAO,CAACC,GAAR,CAAaI,KAAb;AACAF,MAAAA,KAAK,CAAEE,KAAF,CAAL;AACD,KAjBG,CAAN;AAkBD,GAnBD;;AAqBA,QAAMC,QAAQ,GAAGf,KAAK,IAAI;AACxBS,IAAAA,OAAO,CAACC,GAAR,CAAaV,KAAb;AACAG,IAAAA,QAAQ;AACT,GAHD;;AAKA,SACE,oBAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAEY,QAA5B;AAAsC,IAAA,QAAQ,EAAEhB,iBAAhD;AAAmE,IAAA,KAAK,EAAE,CAACF,KAAK,CAACP,IAAP,EAAaO,KAAK,CAACN,GAAnB,EAAwBM,KAAK,CAACL,WAA9B,EAA2CK,KAAK,CAACJ,QAAjhGF;AAkGD,CA5ID;;AA8IA,eAAeP,UAAf","sourcesContent":["import React, {useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport axios from 'axios';\n\nimport RegistrationForm from '../components/RegistrationForm'\n\nconst DoggoInput = props => {\n  const initialState = {\n    id: null,\n    name: '',\n    age: '',\n    description: '',\n    doggo_id: '',\n  };\n\n  const {handleSubmit, register, errors} = useForm ();\n  const [doggo, setDoggo] = useState (initialState);\n  \n  const handleInputChange = event => {\n    setDoggo ({...doggo, [event.target.name]: event.target.value});\n  };\n\n  const postData = async () => {\n    await axios\n      .post (props.urlApi, {\n        registration: {\n          name: doggo.name,\n          age: doggo.age,\n          description: doggo.description,\n          doggo_id: doggo.doggo_id\n        }})\n      .then (response => {\n        console.log (response);\n        console.log (response.data);\n        setDoggo(initialState)\n        alert ('succesfully registered');\n      })\n      .catch (error => {\n        console.log (error);\n        alert (error);\n      });\n  }\n\n  const onSubmit = event => {\n    console.log (event);\n    postData();\n  };\n\n  return (\n    <RegistrationForm onSubmit={onSubmit} onChange={handleInputChange} value={[doggo.name, doggo.age, doggo.description, doggo.doggo_id]}/>\n    // <div className=\"container\">\n    //   <div className=\"reg-container\">\n    //     <form onSubmit={handleSubmit (onSubmit)}>\n    //       <p>Add Doggo Registration</p>\n    //       <div className=\"column\">\n    //         <input\n    //           type=\"text\"\n    //           className=\"input\"\n    //           placeholder=\"Name\"\n    //           name=\"name\"\n    //           value={doggo.name}\n    //           onChange={handleInputChange}\n    //           ref={register ({\n    //             required: 'Name is required',\n    //             pattern: {\n    //               value: '',\n    //               message: 'Please input valid name',\n    //             },\n    //           })}\n    //         />\n    //         <p className=\"has-text-danger\">\n    //           {errors.name && errors.name.message}\n    //         </p>\n    //       </div>\n\n    //       <div className=\"column\">\n    //         <input\n    //           type=\"number\"\n    //           className=\"input\"\n    //           placeholder=\"Age\"\n    //           name=\"age\"\n    //           value={doggo.age}\n    //           onChange={handleInputChange}\n    //           ref={register ({\n    //             required: 'Age is required',\n    //             min: 0,\n    //             max: 100,\n    //             pattern: {\n    //               value: '',\n    //               message: 'Age must be within 0-100',\n    //             },\n    //           })}\n    //         />\n    //         <p className=\"has-text-danger\">\n    //           {errors.age && errors.age.message}\n    //         </p>\n    //       </div>\n\n    //       <div className=\"column\">\n    //         <input\n    //           type=\"text\"\n    //           className=\"input\"\n    //           placeholder=\"Description\"\n    //           name=\"description\"\n    //           value={doggo.description}\n    //           onChange={handleInputChange}\n    //           ref={register ({\n    //             required: 'Description is required, up to 100 letters',\n    //             maxLength: 100,\n    //             pattern: {\n    //               value: '',\n    //               message: 'Description is only up to 100 letters',\n    //             },\n    //           })}\n    //         />\n    //         <p className=\"has-text-danger\">\n    //           {errors.description && errors.description.message}\n    //         </p>\n    //       </div>\n\n    //       <div className=\"column\">\n    //         <input\n    //           type=\"text\"\n    //           className=\"input\"\n    //           placeholder=\"Doggo id\"\n    //           name=\"doggo_id\"\n    //           value={doggo.doggo_id}\n    //           onChange={handleInputChange}\n    //           ref={register ({\n    //             required: 'Doggo ID is required',\n    //             pattern: {\n    //               value: /(J)(\\d{6})([a-d])/g,\n    //               message: 'Invalid id format, starts with capital letter J, followed by any 6 digits number, and ends with any lowercase letter from a to d',\n    //             },\n    //           })}\n    //         />\n    //         <p className=\"has-text-danger\">\n    //           {errors.doggo_id && errors.doggo_id.message}\n    //         </p>\n    //       </div>\n\n    //       <button className=\"button is-primary\" type=\"submit\">Submit</button>\n    //     </form>\n    //   </div>\n    // </div>\n  );\n};\n\nexport default DoggoInput;\n"]},"metadata":{},"sourceType":"module"}